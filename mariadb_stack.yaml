heat_template_version: 2013-05-23

description: |
  Deploys a salt-master and a number of salt-minions.
  One minion will be an haproxy node.
  One minion will be a database node.
  A variable number of minions will be web nodes each with
  apache2, php5, drupal, memcached, php-apc, lsyncd, csync2, and xinetd.
  Floating ips will be assigned to the salt-master and haproxy nodes.

parameters:

  keyname:
    type: string
    label: Salt-Master Keyname.
    description: The name of the key that should be used to ssh into the Salt-Master.

  image:
    type: string
    label: Image Name
    description: Name of the existing image to use for every vm spun up by this stack. The image should have heat-config and heat-config-script baked in.

  floating-network-id:
    type: string
    label: External Network UUID
    description: UUID of the external network. The private network created by this stack will route to this network. Also, any floating ip's needed by this stack will come this network.

  coms-key-name:
    type: string
    default: coms
    label: Stack Keyname
    description: Unique name of the keypair for node to node communications within the stack.

  minion-count:
    type: number
    default: 2
    label: Number of web servers.
    description: The number of web application servers.

resources:

  # Will be used to generate a random password
  # 32 characters long consisting of alpha numeric characters
  secret:
    type: OS::Heat::RandomString
    properties:
      length: 32
      sequence: lettersdigits

  # Keypair for communicating between nodes within the stack.
  # Will allow minions to ssh into the master and vice versa.
  coms:
    type: OS::Nova::KeyPair
    properties:
      name:
        get_param: coms-key-name
      save_private_key: true 

  # Private network for this stack
  net:
    type: OS::Neutron::Net

  # Private subnet for this stack
  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id:
        get_resource: net
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 8.8.8.8
        - 4.2.2.2

  # Routes the private network to the external network.
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: 
          get_param: floating-network-id

  # Router interface
  interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id:
        get_resource: router
      subnet_id: 
        get_resource: subnet

  # One floating ip for the salt-master node
  master-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 
        get_param: floating-network-id

  # One port for the salt-master node
  master-port:
    type: OS::Neutron::Port
    properties:
      network_id: 
        get_resource: net

  # Software configuration script for the salt-master node
  # Installs salt-master, sets permission on some personality files
  # and uses git to clone any provided state/formula repos
  config-salt-master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: state_repos
      config: |
        #!/bin/bash
        chmod 0700 /root/.ssh/coms_rsa
        chmod 0600 /srv/pillar/drupal.sls

        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install git
        apt-get install -y git
            
        # Install salt master
        echo "Install Salt Master"
        curl -L http://bootstrap.saltstack.org | sh -s -- -M -N
        mkdir /srv/salt
        mkdir /srv/pillar
        mkdir /srv/pillar/mysql
        mkdir /srv/pillar/galera
        mkdir /srv/pillar/haproxy
        echo -e 'file_roots:\n  base:\n    - /srv/salt' >> /etc/salt/master

        # Clone state/formula repos in state root directory
        cd /srv/
        while read -r line
        do
            if [ -n "$line" ]; then
                git clone $line
            fi
        done <<< "$state_repos"

        # Finally - Restart salt service
        service salt-master restart

  # Software configuration for salt minion
  # Installs salt-minion, sets up authentication from minion to master,
  # and sets permissions of any personality files.
  config-salt-minion:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: public_key
        - name: master
      config: |
        #!/bin/bash
        chmod 0700 /root/.ssh/coms_rsa
            
        # Add coms from minions to master
        echo "$public_key" >> /root/.ssh/authorized_keys

        # Install salt minion
        curl -L http://bootstrap.saltstack.org | sh -s
        echo master: $master >> /etc/salt/minion

        service salt-minion restart

        ssh-keyscan -H $master >> /root/.ssh/known_hosts

        echo "Sleeping for 20s"
        sleep 20

        MASTER_PKI_PATH="/etc/salt/pki/master/minions/"
        MASTER_PKI_PATH_PRE="/etc/salt/pki/master/minions_pre/"
        MINION_PKI_PATH="/etc/salt/pki/minion/minion.pub"
        HOSTNAME=`hostname --fqdn`

        cp $MINION_PKI_PATH /root/minion_key

        scp -i /root/.ssh/coms_rsa /root/minion_key root@$master:/tmp/$HOSTNAME

        ssh -i /root/.ssh/coms_rsa root@$master "mv /tmp/$HOSTNAME $MASTER_PKI_PATH$HOSTNAME; chmod 700 $MASTER_PKI_PATH$HOSTNAME; rm $MASTER_PKI_PATH_PRE$HOSTNAME"

        service salt-minion restart
        rm /root/minion_key
        rm /root/.ssh/coms_rsa

  # Software deployment for salt-master. Deploys the salt-master softrware
  # configuration.
  # Also lists the git repos necessary to make the drupal stack work.
  deploy-salt-master:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        state_repos: |
          https://github.com/elextro/mariadb-galera-salt-ubuntu-formula.git
      config:
        get_resource: config-salt-master
      server:
        get_resource: master

  # The salt master instance
  # Should have one floating ip
  master:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      key_name:
        get_param: keyname
      image: 
        get_param: image
      flavor: m1.small
      name: master
      personality:

        # Private key for ssh'ing into minions
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # The top.sls file for salt states.
        # Dictates which minions get which formulas
        /srv/salt/top.sls: |
          base:
            '*':
              - common
            'roles:haproxy':
              - match: grain
              - haproxy
            'roles:db_bootstrap':
              - match: grain
              - galera
              - xtrabackup
            'roles:db':
              - match: grain
              - galera
              - xtrabackup

        # The top.sls file for salt pillars
        # Dictates which minions get which pillars.
        /srv/pillar/top.sls: |
          base:
            'roles:haproxy':
              - match: grain
              - haproxy
            'roles:db_bootstrap': 
              - match: grain
              - mysql
              - galera
            'roles:db':
              - match: grain
              - mysql
              - galera
              
        # The galera pillar. Contains Some basic information for mariadb/galera config and installation
        /srv/pillar/galera/init.sls: |
          interfaces:
            private: eth0
            public: eth0
          mine_functions:
            network.ip_addrs: [eth0]
            network.interfaces: []
          mine_interval: 1
          mdb_cfg_files:
            ubuntu_cluster:
              path: /etc/mysql/conf.d/cluster.cnf
              source: salt://galera/config/cluster.cnf
            ubuntu_maintenance:
              path: /etc/mysql/debian.cnf
              source: salt://galera/config/debian.cnf
          mdb_config:
            provider: /usr/lib64/galera/libgalera_smm.so
          mdb_repo:
            baseurl: http://mirror.jmu.edu/pub/mariadb/repo/5.5/ubuntu
            keyserver: hkp://keyserver.ubuntu.com:80
            keyid: '0xcbcb082a1bb943db'
            file: /etc/apt/sources.list

        /srv/pillar/haproxy/init.sls:
          interfaces:
            private: eth0
            public: eth0 
          mine_functions:
            network.ip_addrs: [eth0]
            network.interfaces: []
        
        /srv/pillar/mysql/init.sls:
          mysql_config:
            dbuser: root
            port: 3306
            socket: /var/lib/mysql/mysql.sock
            datadir: /var/lib/mysql/db_data
            maintenance_password: areallyhardpassword
            admin_password: 2YpYP77Au7
   
        
     

      # Get access from the master-port
      networks:
        - port:
            get_resource: master-port

      # Using SoftwareConfigs - This needs to be set to SOFTWARE_CONFIG
      user_data_format: SOFTWARE_CONFIG

  # Associate the master floating ip to the master port
  master-floating-ip-ass: 
    type: OS::Neutron::FloatingIPAssociation
    properties: 
      floatingip_id:
        get_resource: master-ip
      port_id:
        get_resource: master-port

  # Deploys a group of (vms + software deployment).
  # This group the varying number of web servers.
  # Each instance in this group will be an instance with salt-minion
  # installed and will have the salt role of 'web'
#  minion-group-web:
#    type: OS::Heat::ResourceGroup
#    depends_on: deploy-salt-master
#    properties:
#      count:
#        get_param: minion-count
#      resource_def:
#        type: Salt::Minion
#        properties:
#          flavor: m1.small
#          private_key:
#            get_attr:
#              - coms
#              - private_key
#          public_key:
#            get_attr:
#              - coms
#              - public_key
#          image:
#            get_param: image
#          network:
#            get_resource: net
#          master:
#            get_attr:
#              - master
#              - first_address
#          minion-config:
#            get_resource: config-salt-minion
#          minion-roles: "web"

  minion-group-db:
    type: OS::Heat::ResourceGroup
    depends_on: deply-salt-master
    properties:
      count:
        get_param: minion-count - 1
      resource_def:
        type: Salt::Minion
        properties:
          flavor: m1.small
          private_key:
            get_attr:
              - coms
              - private_key
          public_key:
            get_attr:
              - coms
              - public_key
          image: 
            get_param: image
          network: 
            get_resource: net
          master: 
            get_attr:
              - master
              - first_address
          minion-config:
            get_resource: config-salt-minion
          minion-roles: "db"
          

  # Floating ip for haproxy node
  minion-haproxy-ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 
        get_param: floating-network-id

  # Port for haproxy node
  minion-haproxy-port:
    type: OS::Neutron::Port
    properties:
      network_id: 
        get_resource: net

  # haproxy minion
  minion-haproxy:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      flavor: m1.small
      image:
        get_param: image
      personality:

        # Private key for node to node communication
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # Set the salt role to haproxy
        /etc/salt/grains: |
          roles:
            - haproxy
      
      networks:
        - port:
            get_resource: minion-haproxy-port

      # Needs to be SOFTWARE_CONFIG when using SoftwareConfigs
      user_data_format: SOFTWARE_CONFIG

  # Associate haproxy floating ip to the port
  minion-haproxy-floating-ip-ass: 
    type: OS::Neutron::FloatingIPAssociation
    properties: 
      floatingip_id:
        get_resource: minion-haproxy-ip
      port_id:
        get_resource: minion-haproxy-port

  # Deploys the salt-minion software config to the haproxy node.
  deploy-haproxy:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy-salt-master
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        master:
          get_attr:
            - master
            - first_address
      config:
        get_resource: config-salt-minion
      server:
        get_resource: minion-haproxy

  # The database instance of this stack 
  minion-db:
    type: OS::Nova::Server
    depends_on: interface
    properties:
      image:
        get_param: image
      flavor: m1.small
      personality:

        # Private key for node to node communications
        /root/.ssh/coms_rsa:
          get_attr:
            - coms
            - private_key

        # Set the salt-grain roles to ['db']
        /etc/salt/grains: |
          roles:
            - db

      networks:
        - network:
            get_resource: net

      # This needs to be set to SOFTWARE_CONFIG when using SoftwareConfigs
      user_data_format: SOFTWARE_CONFIG

  # Deploys the salt-minion software to the database minion
  deploy-db:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy-salt-master
    properties:
      input_values:
        public_key:
          get_attr:
            - coms
            - public_key
        master:
          get_attr:
            - master
            - first_address
      config:
        get_resource: config-salt-minion
      server:
        get_resource: minion-db

  # SoftwareConfig that is to run on master.
  # Executes a salt state.highstate on all attached minions.
  config-deploy:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: |
        #!/bin/bash
        salt '*' saltutil.refresh_pillar
        salt '*' mine.update
        salt '*' state.highstate

  # Deploys the the deploy softwareconfig
  # All minions should be spun up and running salt-minion
  # before executing this deployment.
  deploy:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: config-deploy
      server:
        get_resource: master
    depends_on:
      - deploy-salt-master
      - minion-group-web
      - deploy-db
      - deploy-haproxy

outputs:
  master-ip:
    value: 
      get_attr:
        - master-ip
        - floating_ip_address
  
  minion-web-ips:
    value:
      get_attr:
        - minion-group-web
        - minion-ip

  minion-haproxy-ip:
    value:
      get_attr:
        - minion-haproxy
        - floatng_ip_address

  minion-db-ip:
    value:
      get_attr:
        - minion-db
        - first_address

  finish-drupal-url:
    value:
      str_replace:
        template: http://$haproxyip/install.php
        params:
          $haproxyip:
            get_attr:
              - minion-haproxy
              - floating_ip_address
        

  # Uncomment the stdout's and stderr's if problems are occuring.
  #master-stdout:
  #  value:
  #    get_attr:
  #     - deploy-salt-master
  #     - deploy_stdout
  #master-stderr:
  #  value:
  #    get_attr:
  #      - deploy-salt-master
  #      - deploy_stderr

  #minion-web-stdout:
  #  value:
  #    get_attr:
  #      - minion-group-web
  #      - minion-stdout
  #minion-web-stderr:
  #  value:
  #    get_attr:
  #      - minion-group-web
  #      - minion-stderr
